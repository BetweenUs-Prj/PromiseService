plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.shop'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    // HttpClient 4.x 충돌 방지
    all {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient' // 4.x 제외
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'  // 임시 비활성화
    // implementation 'org.springframework.boot:spring-boot-starter-security'      // 임시 비활성화
    // implementation 'org.springframework.boot:spring-boot-starter-webflux' // WebClient 대신 RestTemplate 사용
    // Apache HttpClient 대신 Spring Boot 기본 HTTP 클라이언트 사용
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    
    // 테스트 의존성
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// Jacoco 테스트 커버리지 설정
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/dto/**',
                '**/config/**',
                '**/PromiseServiceApplication.class'
            ])
        }))
    }
}

// 테스트 커버리지 검증 설정
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70 // 70% 이상 커버리지 요구
            }
        }
    }
}
