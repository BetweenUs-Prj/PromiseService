# Cursor AI 코딩 룰셋

## 핵심 규칙: 코드 작성 이유 주석 필수
- 모든 클래스, 메서드, 주요 로직 블록에 왜 작성했는지 이유를 주석으로 달아주세요
- 주석은 한국어로 작성하고, "이유:" 또는 "목적:" 키워드로 시작합니다
- 코드의 의도와 비즈니스 로직을 명확히 설명해주세요

## Java 코딩 규칙
- 모든 public 클래스와 메서드에 JavaDoc 주석을 작성합니다
- JavaDoc에는 "이유:" 섹션을 포함하여 작성 목적을 명시합니다
- 복잡한 로직이나 알고리즘에는 인라인 주석으로 이유를 설명합니다

## 주석 작성 예시
```java
/**
 * 사용자 친구 관계를 관리하는 서비스
 * 이유: 소셜 기능에서 사용자 간 친구 관계를 효율적으로 관리하기 위해
 */
public class FriendshipService {
    
    /**
     * 친구 요청을 처리하는 메서드
     * 이유: 사용자가 친구 요청을 보내고 받을 수 있도록 하여 소셜 네트워크 형성
     * 
     * @param request 친구 요청 정보
     * @return 처리 결과
     */
    public FriendResponse processFriendRequest(FriendRequest request) {
        // 사용자 존재 여부 확인
        // 이유: 잘못된 사용자 ID로 인한 오류 방지
        User user = userRepository.findById(request.getUserId())
            .orElseThrow(() -> new UserNotFoundException("사용자를 찾을 수 없습니다"));
        
        // 중복 친구 요청 방지
        // 이유: 동일한 사용자에게 여러 번 친구 요청이 가는 것을 방지
        if (friendshipRepository.existsByUsers(request.getUserId(), request.getFriendId())) {
            throw new DuplicateFriendshipException("이미 친구 관계가 존재합니다");
        }
        
        // 친구 요청 저장
        // 이유: 사용자의 친구 요청 상태를 추적하고 관리하기 위해
        Friendship friendship = new Friendship();
        friendship.setUserId(request.getUserId());
        friendship.setFriendId(request.getFriendId());
        friendship.setStatus(FriendshipStatus.PENDING);
        
        return friendshipRepository.save(friendship);
    }
}
```

## 추가 코딩 규칙
- 변수명과 함수명은 camelCase를 사용합니다
- 클래스명은 PascalCase를 사용합니다
- 들여쓰기는 4칸 공백을 사용합니다
- 모든 public 메서드에 예외 처리를 포함합니다
- Stream API와 Optional을 적극 활용합니다

## 테스트 코드 규칙
- 테스트 메서드명은 `should_When_Then` 형식을 사용합니다
- 각 테스트에 "테스트 이유:" 주석을 추가합니다
- Mock 객체를 사용하여 외부 의존성을 격리합니다

## 아키텍처 규칙
- Controller-Service-Repository 패턴을 따릅니다
- DTO와 Entity를 명확히 분리합니다
- 의존성 주입은 생성자 주입을 사용합니다
- 각 계층의 역할과 책임을 주석으로 명시합니다

